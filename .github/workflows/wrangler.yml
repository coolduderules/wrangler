name: coolduderules1/wrangler
on:
  push:
  workflow_dispatch:
concurrency:
  group: "${{ github.ref }}"
  cancel-in-progress: true
jobs:
  lint-file:
    runs-on: ubuntu-latest
    container:
      image: "$LINT_FILE_IMAGE"
    if: # Unable to map conditional expression to GitHub Actions equivalent
#         $LINT_FILE_ALLOW_FAILURE == "true" && ($LINT_FILE == "true") || $LINT_FILE == "true"
    timeout-minutes: 60
    env:
      DOCKER_REGISTRY_IMAGE_TAG: "$CI_REGISTRY_IMAGE/${{ github.ref }}:${{ github.sha }}"
      DOCKER_DOCKERHUB_IMAGE_REPOSITORY: index.docker.io/jfxs/wrangler
      DOCKER_DOCKERHUB_RM_URL: jfxs/wrangler
      DOCKER_QUAY_IMAGE_REPOSITORY: quay.io/ifxs/wrangler
      DOCKER_QUAY_RM_URL: quay.io/ifxs/wrangler
      DOCKER_SBOM_SUBSET: "^ca-certificates |^curl |^git |^github.com/go-task/task/v3 |^node |^npm |^wrangler "
      LINT_DOCKER: 'true'
      LINT_VALE: 'true'
      TASKFILE_VERSION: ".Taskfile-version.yml"
      DOCKER_TEST_VERSION_DIND: 'false'
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 20
        lfs: true
    - run: wget -q -O .Taskfile-lint.yml https://gitlab.com/op_so/task/task-templates/-/raw/main/Taskfile.d/lint.yml
    - run: echo -en  "[safe]\n  directory = ${{ github.workspace }}\n" >> ~/.gitconfig
    - run: task --taskfile .Taskfile-lint.yml file
  lint-pre-commit:
    runs-on: ubuntu-latest
    container:
      image: "$LINT_PRECOMMIT_IMAGE"
    if: # Unable to map conditional expression to GitHub Actions equivalent
#         $LINT_PRECOMMIT_ALLOW_FAILURE == "true" && ($LINT_PRECOMMIT == "true") || $LINT_PRECOMMIT == "true"
    timeout-minutes: 60
    env:
      DOCKER_REGISTRY_IMAGE_TAG: "$CI_REGISTRY_IMAGE/${{ github.ref }}:${{ github.sha }}"
      DOCKER_DOCKERHUB_IMAGE_REPOSITORY: index.docker.io/jfxs/wrangler
      DOCKER_DOCKERHUB_RM_URL: jfxs/wrangler
      DOCKER_QUAY_IMAGE_REPOSITORY: quay.io/ifxs/wrangler
      DOCKER_QUAY_RM_URL: quay.io/ifxs/wrangler
      DOCKER_SBOM_SUBSET: "^ca-certificates |^curl |^git |^github.com/go-task/task/v3 |^node |^npm |^wrangler "
      LINT_DOCKER: 'true'
      LINT_VALE: 'true'
      TASKFILE_VERSION: ".Taskfile-version.yml"
      DOCKER_TEST_VERSION_DIND: 'false'
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 20
        lfs: true
    - run: task --taskfile /lint.yml pre-commit DIR=$(pwd)
  lint-docker:
    runs-on: ubuntu-latest
    container:
      image: "$LINT_DOCKER_IMAGE"
    if: # Unable to map conditional expression to GitHub Actions equivalent
#         ($LINT_DOCKER_ALLOW_FAILURE == "true") && ($LINT_DOCKER == "true") || $LINT_DOCKER == "true"
    timeout-minutes: 60
    env:
      DOCKER_REGISTRY_IMAGE_TAG: "$CI_REGISTRY_IMAGE/${{ github.ref }}:${{ github.sha }}"
      DOCKER_DOCKERHUB_IMAGE_REPOSITORY: index.docker.io/jfxs/wrangler
      DOCKER_DOCKERHUB_RM_URL: jfxs/wrangler
      DOCKER_QUAY_IMAGE_REPOSITORY: quay.io/ifxs/wrangler
      DOCKER_QUAY_RM_URL: quay.io/ifxs/wrangler
      DOCKER_SBOM_SUBSET: "^ca-certificates |^curl |^git |^github.com/go-task/task/v3 |^node |^npm |^wrangler "
      LINT_DOCKER: 'true'
      LINT_VALE: 'true'
      TASKFILE_VERSION: ".Taskfile-version.yml"
      DOCKER_TEST_VERSION_DIND: 'false'
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 20
        lfs: true
    - run: hadolint $LINT_DOCKER_FILE
  lint-link:
    runs-on: ubuntu-latest
    container:
      image: "$LINT_LINK_IMAGE"
      options: "--entrypoint "
    if: # Unable to map conditional expression to GitHub Actions equivalent
#         ($LINT_LINK_ALLOW_FAILURE == "true") && ($LINT_LINK == "true") || $LINT_LINK == "true"
    timeout-minutes: 60
    env:
      DOCKER_REGISTRY_IMAGE_TAG: "$CI_REGISTRY_IMAGE/${{ github.ref }}:${{ github.sha }}"
      DOCKER_DOCKERHUB_IMAGE_REPOSITORY: index.docker.io/jfxs/wrangler
      DOCKER_DOCKERHUB_RM_URL: jfxs/wrangler
      DOCKER_QUAY_IMAGE_REPOSITORY: quay.io/ifxs/wrangler
      DOCKER_QUAY_RM_URL: quay.io/ifxs/wrangler
      DOCKER_SBOM_SUBSET: "^ca-certificates |^curl |^git |^github.com/go-task/task/v3 |^node |^npm |^wrangler "
      LINT_DOCKER: 'true'
      LINT_VALE: 'true'
      TASKFILE_VERSION: ".Taskfile-version.yml"
      DOCKER_TEST_VERSION_DIND: 'false'
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 20
        lfs: true
    - run: lychee .
  lint-markdown:
    runs-on: ubuntu-latest
    container:
      image: "$LINT_MARKDOWN_IMAGE"
      options: "--entrypoint "
    if: # Unable to map conditional expression to GitHub Actions equivalent
#         ($LINT_MARKDOWN_ALLOW_FAILURE == "true") && ($LINT_MARKDOWN == "true") || $LINT_MARKDOWN == "true"
    timeout-minutes: 60
    env:
      DOCKER_REGISTRY_IMAGE_TAG: "$CI_REGISTRY_IMAGE/${{ github.ref }}:${{ github.sha }}"
      DOCKER_DOCKERHUB_IMAGE_REPOSITORY: index.docker.io/jfxs/wrangler
      DOCKER_DOCKERHUB_RM_URL: jfxs/wrangler
      DOCKER_QUAY_IMAGE_REPOSITORY: quay.io/ifxs/wrangler
      DOCKER_QUAY_RM_URL: quay.io/ifxs/wrangler
      DOCKER_SBOM_SUBSET: "^ca-certificates |^curl |^git |^github.com/go-task/task/v3 |^node |^npm |^wrangler "
      LINT_DOCKER: 'true'
      LINT_VALE: 'true'
      TASKFILE_VERSION: ".Taskfile-version.yml"
      DOCKER_TEST_VERSION_DIND: 'false'
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 20
        lfs: true
    - run: markdownlint-cli2 $LINT_MARKDOWN_GLOB
  lint-shell:
    runs-on: ubuntu-latest
    container:
      image: "$LINT_SHELL_IMAGE"
    if: # Unable to map conditional expression to GitHub Actions equivalent
#         ($LINT_SHELL_ALLOW_FAILURE == "true") && ($LINT_SHELL == "true") || $LINT_SHELL == "true"
    timeout-minutes: 60
    env:
      DOCKER_REGISTRY_IMAGE_TAG: "$CI_REGISTRY_IMAGE/${{ github.ref }}:${{ github.sha }}"
      DOCKER_DOCKERHUB_IMAGE_REPOSITORY: index.docker.io/jfxs/wrangler
      DOCKER_DOCKERHUB_RM_URL: jfxs/wrangler
      DOCKER_QUAY_IMAGE_REPOSITORY: quay.io/ifxs/wrangler
      DOCKER_QUAY_RM_URL: quay.io/ifxs/wrangler
      DOCKER_SBOM_SUBSET: "^ca-certificates |^curl |^git |^github.com/go-task/task/v3 |^node |^npm |^wrangler "
      LINT_DOCKER: 'true'
      LINT_VALE: 'true'
      TASKFILE_VERSION: ".Taskfile-version.yml"
      DOCKER_TEST_VERSION_DIND: 'false'
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 20
        lfs: true
    - run: shellcheck $LINT_SHELL_FILE
  lint-vale:
    runs-on: ubuntu-latest
    container:
      image: "$LINT_VALE_IMAGE"
      options: "--entrypoint "
    if: # Unable to map conditional expression to GitHub Actions equivalent
#         !($LINT_VALE != "true") || $LINT_VALE_ALLOW_FAILURE == "true"
    timeout-minutes: 60
    env:
      DOCKER_REGISTRY_IMAGE_TAG: "$CI_REGISTRY_IMAGE/${{ github.ref }}:${{ github.sha }}"
      DOCKER_DOCKERHUB_IMAGE_REPOSITORY: index.docker.io/jfxs/wrangler
      DOCKER_DOCKERHUB_RM_URL: jfxs/wrangler
      DOCKER_QUAY_IMAGE_REPOSITORY: quay.io/ifxs/wrangler
      DOCKER_QUAY_RM_URL: quay.io/ifxs/wrangler
      DOCKER_SBOM_SUBSET: "^ca-certificates |^curl |^git |^github.com/go-task/task/v3 |^node |^npm |^wrangler "
      LINT_DOCKER: 'true'
      LINT_VALE: 'true'
      TASKFILE_VERSION: ".Taskfile-version.yml"
      DOCKER_TEST_VERSION_DIND: 'false'
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 20
        lfs: true
    - run: mkdir -p $LINT_VALE_STYLES_DIR
    - run: "/bin/vale sync"
    - run: "/bin/vale $LINT_VALE_FILE"
  lint-yaml:
    runs-on: ubuntu-latest
    container:
      image: "$LINT_YAML_IMAGE"
    if: # Unable to map conditional expression to GitHub Actions equivalent
#         ($LINT_YAML_ALLOW_FAILURE == "true") && ($LINT_YAML == "true") || $LINT_YAML == "true"
    timeout-minutes: 60
    env:
      DOCKER_REGISTRY_IMAGE_TAG: "$CI_REGISTRY_IMAGE/${{ github.ref }}:${{ github.sha }}"
      DOCKER_DOCKERHUB_IMAGE_REPOSITORY: index.docker.io/jfxs/wrangler
      DOCKER_DOCKERHUB_RM_URL: jfxs/wrangler
      DOCKER_QUAY_IMAGE_REPOSITORY: quay.io/ifxs/wrangler
      DOCKER_QUAY_RM_URL: quay.io/ifxs/wrangler
      DOCKER_SBOM_SUBSET: "^ca-certificates |^curl |^git |^github.com/go-task/task/v3 |^node |^npm |^wrangler "
      LINT_DOCKER: 'true'
      LINT_VALE: 'true'
      TASKFILE_VERSION: ".Taskfile-version.yml"
      DOCKER_TEST_VERSION_DIND: 'false'
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 20
        lfs: true
    - run: yamllint .
  docker-build:
    needs:
    - lint-file
    - lint-pre-commit
    - lint-docker
    - lint-link
    - lint-markdown
    - lint-shell
    - lint-vale
    - lint-yaml
    runs-on: ubuntu-latest
    container:
      image: "$DOCKER_IMAGE_FACTORY"
    timeout-minutes: 60
    services:
      docker:$DOCKER_SERVICE_DOCKER_TAG:
        image: docker:$DOCKER_SERVICE_DOCKER_TAG
    env:
      DOCKER_REGISTRY_IMAGE_TAG: "$CI_REGISTRY_IMAGE/${{ github.ref }}:${{ github.sha }}"
      DOCKER_DOCKERHUB_IMAGE_REPOSITORY: index.docker.io/jfxs/wrangler
      DOCKER_DOCKERHUB_RM_URL: jfxs/wrangler
      DOCKER_QUAY_IMAGE_REPOSITORY: quay.io/ifxs/wrangler
      DOCKER_QUAY_RM_URL: quay.io/ifxs/wrangler
      DOCKER_SBOM_SUBSET: "^ca-certificates |^curl |^git |^github.com/go-task/task/v3 |^node |^npm |^wrangler "
      LINT_DOCKER: 'true'
      LINT_VALE: 'true'
      TASKFILE_VERSION: ".Taskfile-version.yml"
      DOCKER_TEST_VERSION_DIND: 'false'
      DOCKER_HOST: tcp://docker:2375
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 20
        lfs: true
    - run:
        "!reference":
        - ".snippets"
        - prerequisites-task
    - run: if [ -z "$DOCKER_BUILD_VERSION" ]; then printf "\033[0;31m[ERROR] DOCKER_BUILD_VERSION variable is empty!\033[0m\n" && exit 1; fi
    - run: printf "\033[0;32m[OK] DOCKER_BUILD_VERSION \"%s\". \033[0m\n" "$DOCKER_BUILD_VERSION"
    - run: task --taskfile "$DOCKER_TASKFILE_DOCKER" build-push-multiarch DOCKER_USER="$CI_REGISTRY_USER" DOCKER_PASS="$CI_REGISTRY_PASSWORD" TAG="$DOCKER_REGISTRY_IMAGE_TAG" VERSION="$DOCKER_BUILD_VERSION" VCS_REF="${{ github.sha }}" REGISTRY="$CI_REGISTRY"
    - run: digest=$(task --taskfile "$DOCKER_TASKFILE_DOCKER" get-digest IMG="$DOCKER_REGISTRY_IMAGE_TAG")
    - run: echo "$digest" > image-digest.txt
    - run: echo -n "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - run: if [ -z "$COSIGN_PASSWORD" ]; then printf "\033[0;31m[ERROR] COSIGN_PASSWORD variable is empty!\033[0m\n" && exit 1; fi
    - run: cosign sign --tlog-upload=false --key "$COSIGN_PRIVATE_KEY" "$CI_REGISTRY_IMAGE/${{ github.ref }}@$digest"
    - run: task --taskfile "$DOCKER_TASKFILE_SBOM" attach-sbom-attest I="$CI_REGISTRY_IMAGE/${{ github.ref }}@$digest" K="$COSIGN_PRIVATE_KEY"
    - run: docker logout "$CI_REGISTRY"
      if: always()
    - uses: actions/upload-artifact@v4.1.0
      if: success()
      with:
        name: "${{ github.job }}"
        retention-days: 7
        path: image-digest.txt
  sanity-test-get-manifest-version:
    needs: docker-build
    runs-on: ubuntu-latest
    container:
      image: "$DOCKER_IMAGE_FACTORY"
    timeout-minutes: 60
    env:
      DOCKER_REGISTRY_IMAGE_TAG: "$CI_REGISTRY_IMAGE/${{ github.ref }}:${{ github.sha }}"
      DOCKER_DOCKERHUB_IMAGE_REPOSITORY: index.docker.io/jfxs/wrangler
      DOCKER_DOCKERHUB_RM_URL: jfxs/wrangler
      DOCKER_QUAY_IMAGE_REPOSITORY: quay.io/ifxs/wrangler
      DOCKER_QUAY_RM_URL: quay.io/ifxs/wrangler
      DOCKER_SBOM_SUBSET: "^ca-certificates |^curl |^git |^github.com/go-task/task/v3 |^node |^npm |^wrangler "
      LINT_DOCKER: 'true'
      LINT_VALE: 'true'
      TASKFILE_VERSION: ".Taskfile-version.yml"
      DOCKER_TEST_VERSION_DIND: 'false'
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 20
        lfs: true
    - uses: actions/download-artifact@v4.1.0
    - run: if [ ! -f "$DOCKER_TASKFILE_DOCKER" ]; then wget -q -O "$DOCKER_TASKFILE_DOCKER" https://gitlab.com/op_so/task/task-templates/-/raw/main/Taskfile.d/docker.yml; fi
    - run: if [ ! -f "$DOCKER_TASKFILE_SBOM" ]; then wget -q -O "$DOCKER_TASKFILE_SBOM" https://gitlab.com/op_so/task/task-templates/-/raw/main/Taskfile.d/sbom.yml; fi
    - run: if [ ! -f "$DOCKER_TASKFILE_VERSION" ]; then wget -q -O "$DOCKER_TASKFILE_VERSION" https://gitlab.com/op_so/task/task-templates/-/raw/main/Taskfile.d/version.yml; fi
    - run: version_manifest=$(task --taskfile "$DOCKER_TASKFILE_VERSION" get-docker-manifest-version IMG="$DOCKER_REGISTRY_IMAGE_TAG")
    - run: if [ -z "$version_manifest" ]; then printf "\033[0;31m[ERROR] Version manifest variable is empty!\033[0m\n" && exit 1; fi
    - run: echo "Version from manifest -> $version_manifest <"
    - run: echo "$version_manifest" > image-manifest-version.txt
    - uses: actions/upload-artifact@v4.1.0
      if: success()
      with:
        name: "${{ github.job }}"
        retention-days: 7
        path: image-manifest-version.txt
  sanity-test-version:
    needs: sanity-test-get-manifest-version
    runs-on: ubuntu-latest
    container:
      image: "$DOCKER_IMAGE_FACTORY"
    if: $DOCKER_TEST_VERSION_DIND == "true"
    timeout-minutes: 60
    services:
      docker:$DOCKER_SERVICE_DOCKER_TAG:
        image: docker:$DOCKER_SERVICE_DOCKER_TAG
    env:
      DOCKER_REGISTRY_IMAGE_TAG: "$CI_REGISTRY_IMAGE/${{ github.ref }}:${{ github.sha }}"
      DOCKER_DOCKERHUB_IMAGE_REPOSITORY: index.docker.io/jfxs/wrangler
      DOCKER_DOCKERHUB_RM_URL: jfxs/wrangler
      DOCKER_QUAY_IMAGE_REPOSITORY: quay.io/ifxs/wrangler
      DOCKER_QUAY_RM_URL: quay.io/ifxs/wrangler
      DOCKER_SBOM_SUBSET: "^ca-certificates |^curl |^git |^github.com/go-task/task/v3 |^node |^npm |^wrangler "
      LINT_DOCKER: 'true'
      LINT_VALE: 'true'
      TASKFILE_VERSION: ".Taskfile-version.yml"
      DOCKER_TEST_VERSION_DIND: 'false'
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 20
        lfs: true
    - uses: actions/download-artifact@v4.1.0
      with:
        name: sanity-test:get-manifest-version
    - run: if [ -z "$DOCKER_VERSION_CLI" ]; then printf "\033[0;31m[ERROR] DOCKER_VERSION_CLI variable is empty!\033[0m\n" && exit 1; fi
    - run: echo "Version from CLI -> $DOCKER_VERSION_CLI <"
    - run: version_manifest=$(cat image-manifest-version.txt)
    - run: echo "Version from manifest -> $version_manifest <"
    - run: if [ "$DOCKER_VERSION_CLI" = "$version_manifest" ]; then printf "\033[0;32m[OK]\033[0m Versions from CLI and manifest are equal > %s <-> %s <\n" "$DOCKER_VERSION_CLI" "$version_manifest"; else printf "\033[0;31m[FAILED] Versions from CLI and manifest are different > %s <-> %s <\n" "$DOCKER_VERSION_CLI" "$version_manifest" && exit 1; fi
  sanity-test-version-not-dind:
    needs: sanity-test-get-manifest-version
    runs-on: ubuntu-latest
    container:
      image: "$DOCKER_REGISTRY_IMAGE_TAG"
    if: $DOCKER_TEST_VERSION_DIND != "true"
    timeout-minutes: 60
    env:
      DOCKER_REGISTRY_IMAGE_TAG: "$CI_REGISTRY_IMAGE/${{ github.ref }}:${{ github.sha }}"
      DOCKER_DOCKERHUB_IMAGE_REPOSITORY: index.docker.io/jfxs/wrangler
      DOCKER_DOCKERHUB_RM_URL: jfxs/wrangler
      DOCKER_QUAY_IMAGE_REPOSITORY: quay.io/ifxs/wrangler
      DOCKER_QUAY_RM_URL: quay.io/ifxs/wrangler
      DOCKER_SBOM_SUBSET: "^ca-certificates |^curl |^git |^github.com/go-task/task/v3 |^node |^npm |^wrangler "
      LINT_DOCKER: 'true'
      LINT_VALE: 'true'
      TASKFILE_VERSION: ".Taskfile-version.yml"
      DOCKER_TEST_VERSION_DIND: 'false'
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 20
        lfs: true
    - uses: actions/download-artifact@v4.1.0
      with:
        name: sanity-test:get-manifest-version
    - run: DOCKER_MANIFEST_VERSION=$(cat image-manifest-version.txt)
    - run: printf "\033[0;31m[FAILED] script keyword must be surcharged!" && exit 1
  sanity-test-amd64:
    needs: docker-build
    runs-on: ubuntu-latest
    container:
      image: "$DOCKER_REGISTRY_IMAGE_TAG"
    timeout-minutes: 60
    env:
      DOCKER_REGISTRY_IMAGE_TAG: "$CI_REGISTRY_IMAGE/${{ github.ref }}:${{ github.sha }}"
      DOCKER_DOCKERHUB_IMAGE_REPOSITORY: index.docker.io/jfxs/wrangler
      DOCKER_DOCKERHUB_RM_URL: jfxs/wrangler
      DOCKER_QUAY_IMAGE_REPOSITORY: quay.io/ifxs/wrangler
      DOCKER_QUAY_RM_URL: quay.io/ifxs/wrangler
      DOCKER_SBOM_SUBSET: "^ca-certificates |^curl |^git |^github.com/go-task/task/v3 |^node |^npm |^wrangler "
      LINT_DOCKER: 'true'
      LINT_VALE: 'true'
      TASKFILE_VERSION: ".Taskfile-version.yml"
      DOCKER_TEST_VERSION_DIND: 'false'
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 20
        lfs: true
    - uses: actions/download-artifact@v4.1.0
    - run: node --version
    - run: npx wrangler --version
    - run: task --version
  sanity-test-arm64:
    needs: docker-build
    runs-on:
      - self-hosted
      - arm64
    container:
      image: "$DOCKER_REGISTRY_IMAGE_TAG"
    timeout-minutes: 60
    env:
      DOCKER_REGISTRY_IMAGE_TAG: "$CI_REGISTRY_IMAGE/${{ github.ref }}:${{ github.sha }}"
      DOCKER_DOCKERHUB_IMAGE_REPOSITORY: index.docker.io/jfxs/wrangler
      DOCKER_DOCKERHUB_RM_URL: jfxs/wrangler
      DOCKER_QUAY_IMAGE_REPOSITORY: quay.io/ifxs/wrangler
      DOCKER_QUAY_RM_URL: quay.io/ifxs/wrangler
      DOCKER_SBOM_SUBSET: "^ca-certificates |^curl |^git |^github.com/go-task/task/v3 |^node |^npm |^wrangler "
      LINT_DOCKER: 'true'
      LINT_VALE: 'true'
      TASKFILE_VERSION: ".Taskfile-version.yml"
      DOCKER_TEST_VERSION_DIND: 'false'
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 20
        lfs: true
    - uses: actions/download-artifact@v4.1.0
    - run: node --version
    - run: npx wrangler --version
    - run: task --version
  trigger-publish:
    needs:
    - sanity-test-get-manifest-version
    - sanity-test-version
    - sanity-test-version-not-dind
    - sanity-test-amd64
    - sanity-test-arm64
    runs-on: ubuntu-latest
    container:
      image: "$DOCKER_IMAGE_FACTORY"
    timeout-minutes: 60
    env:
      DOCKER_REGISTRY_IMAGE_TAG: "$CI_REGISTRY_IMAGE/${{ github.ref }}:${{ github.sha }}"
      DOCKER_DOCKERHUB_IMAGE_REPOSITORY: index.docker.io/jfxs/wrangler
      DOCKER_DOCKERHUB_RM_URL: jfxs/wrangler
      DOCKER_QUAY_IMAGE_REPOSITORY: quay.io/ifxs/wrangler
      DOCKER_QUAY_RM_URL: quay.io/ifxs/wrangler
      DOCKER_SBOM_SUBSET: "^ca-certificates |^curl |^git |^github.com/go-task/task/v3 |^node |^npm |^wrangler "
      LINT_DOCKER: 'true'
      LINT_VALE: 'true'
      TASKFILE_VERSION: ".Taskfile-version.yml"
      DOCKER_TEST_VERSION_DIND: 'false'
      PUBLISH: 0
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 20
        lfs: true
    - uses: actions/download-artifact@v4.1.0
      with:
        name: docker:build
    - run:
        "!reference":
        - ".snippets"
        - prerequisites-task
    - run:
        "!reference":
        - ".snippets"
        - check-new-image
    - run: if ! cosign verify --insecure-ignore-tlog=true --key "$COSIGN_PUBLIC_KEY" "$DOCKER_DOCKERHUB_IMAGE_REPOSITORY:latest"; then echo "Signature verification failed for $DOCKER_DOCKERHUB_IMAGE_REPOSITORY:latest -> Publish" && PUBLISH=1; fi
    - run: base_image=$(task --taskfile "$DOCKER_TASKFILE_DOCKER" get-base-image FILE="$DOCKER_DOCKERFILE") && echo "Base image> $base_image <"
    - run: layers_count=$(task --taskfile "$DOCKER_TASKFILE_DOCKER" count-layer IMG="$base_image") && echo "Layer count> $layers_count <"
    - run: layer_id="$(( layers_count - 1 ))" && echo "Layer [ ${layer_id} ] "
    - run: if ! base_latest=$(task --taskfile "$DOCKER_TASKFILE_DOCKER" get-digest-layer-n NUM="$layer_id" IMG="$DOCKER_DOCKERHUB_IMAGE_REPOSITORY:latest"); then echo "Get base image failed for $DOCKER_DOCKERHUB_IMAGE_REPOSITORY:latest -> Publish" && base_latest=""; fi
    - run: base_new=$(task --taskfile "$DOCKER_TASKFILE_DOCKER" get-digest-layer-n NUM="$layer_id" IMG="$CI_REGISTRY_IMAGE/${{ github.ref }}@$digest_ci")
    - run: echo "Base image latest -> $base_latest" && echo "Base image new    -> $base_new"
    - run: if [ "$base_latest" != "$base_new" ]; then echo "Base image are different -> Publish" && PUBLISH=1; fi
    - run: if ! version_latest=$(task --taskfile "$DOCKER_TASKFILE_VERSION" get-docker-manifest-version IMG="$DOCKER_DOCKERHUB_IMAGE_REPOSITORY:latest"); then echo "Get version metadata failed for $DOCKER_DOCKERHUB_IMAGE_REPOSITORY:latest -> Publish" && version_latest=""; fi
    - run: version_new=$(task --taskfile "$DOCKER_TASKFILE_VERSION" get-docker-manifest-version IMG="$CI_REGISTRY_IMAGE/${{ github.ref }}@$digest_ci")
    - run: echo "Version metadata latest -> $version_latest" && echo "Version metadata new    -> $version_new"
    - run: if [ "$version_latest" != "$version_new" ]; then echo "Version metadata are different -> Publish" && PUBLISH=1; fi
    - run: if ! sbom_latest=$(task --taskfile "$DOCKER_TASKFILE_SBOM" get-sbom-attest IMG="$DOCKER_DOCKERHUB_IMAGE_REPOSITORY:latest" KEY="$COSIGN_PUBLIC_KEY" OUTPUT=sbom_latest.txt FORMAT=table); then echo "Get SBOM attestation failed for $DOCKER_DOCKERHUB_IMAGE_REPOSITORY:latest -> Publish" && touch sbom_latest.txt; fi
    - run: task --taskfile "$DOCKER_TASKFILE_SBOM" get-sbom-attest IMG="$CI_REGISTRY_IMAGE/${{ github.ref }}@$digest_ci" KEY="$COSIGN_PUBLIC_KEY" OUTPUT=sbom_new.txt FORMAT=table
    - run: echo "Subset of SBOM > $DOCKER_SBOM_SUBSET <"
    - run: cat sbom_new.txt
    - run: diff_latest_new=$(task --taskfile "$DOCKER_TASKFILE_SBOM" diff-sbom INPUT1=sbom_latest.txt INPUT2=sbom_new.txt GREP="$DOCKER_SBOM_SUBSET")
    - run: if [ "$diff_latest_new" = "1" ]; then echo "SBOM subsets are different -> Publish" && PUBLISH=1; fi
    - run: echo "PUBLISH=$PUBLISH" >> trigger.env
    - run: echo "VERSION_NEW=$version_new" >> trigger.env
    - run: version_major_new=$(task --taskfile "$DOCKER_TASKFILE_VERSION" get-major-version VERSION="$version_new") && echo "TAG_MAJOR_NEW=$version_major_new" >> trigger.env
    - run: version_major_minor_new=$(task --taskfile "$DOCKER_TASKFILE_VERSION" get-major-minor-version VERSION="$version_new") && echo "TAG_MAJOR_MINOR_NEW=$version_major_minor_new" >> trigger.env
    - run: if [ "$PUBLISH" = "1" ]; then index_new=$(task --taskfile "$DOCKER_TASKFILE_DOCKER" get-next-tag-index IMG="$DOCKER_DOCKERHUB_IMAGE_REPOSITORY" VERSION="$version_new"); fi
    - run: if [ "$PUBLISH" = "1" ] && [ -z "$index_new" ]; then printf "\033[0;31m[ERROR] Next tag index is not defined!\n" && exit 1; fi
    - run: if [ "$PUBLISH" = "1" ]; then echo "TAG_FULL_NEW=$version_new-$index_new" >> trigger.env && echo "Publish new image with tag $version_new-$index_new"; fi
#     # 'artifacts.dotenv' was not transformed because there is no suitable equivalent in GitHub Actions
    - uses: actions/upload-artifact@v4.1.0
      if: success()
      with:
        name: "${{ github.job }}"
        path: sbom_new.txt
  publish-dockerhub:
    needs: trigger-publish
    runs-on: ubuntu-latest
    container:
      image: "$DOCKER_IMAGE_FACTORY"
    if: !(${{ github.ref }}) || ${{ github.ref }} == $CI_DEFAULT_BRANCH
    timeout-minutes: 60
    services:
      docker:$DOCKER_SERVICE_DOCKER_TAG:
        image: docker:$DOCKER_SERVICE_DOCKER_TAG
    env:
      DOCKER_REGISTRY_IMAGE_TAG: "$CI_REGISTRY_IMAGE/${{ github.ref }}:${{ github.sha }}"
      DOCKER_DOCKERHUB_IMAGE_REPOSITORY: index.docker.io/jfxs/wrangler
      DOCKER_DOCKERHUB_RM_URL: jfxs/wrangler
      DOCKER_QUAY_IMAGE_REPOSITORY: quay.io/ifxs/wrangler
      DOCKER_QUAY_RM_URL: quay.io/ifxs/wrangler
      DOCKER_SBOM_SUBSET: "^ca-certificates |^curl |^git |^github.com/go-task/task/v3 |^node |^npm |^wrangler "
      LINT_DOCKER: 'true'
      LINT_VALE: 'true'
      TASKFILE_VERSION: ".Taskfile-version.yml"
      DOCKER_TEST_VERSION_DIND: 'false'
      REGISTRY_USER: "$DOCKERHUB_USER"
      REGISTRY_PASS: "$DOCKERHUB_PASSWORD"
      REGISTRY_URL: "$DOCKER_DOCKERHUB_IMAGE_REPOSITORY"
      REGISTRY_RM_URL: "$DOCKER_DOCKERHUB_RM_URL"
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 20
        lfs: true
    - uses: actions/download-artifact@v4.1.0
      with:
        name: docker:build
    - uses: actions/download-artifact@v4.1.0
      with:
        name: trigger:publish
    - run: if [ "$PUBLISH" = "1" ]; then echo -n "$REGISTRY_PASS" | docker login -u "$REGISTRY_USER" --password-stdin; fi
    - run:
        "!reference":
        - ".snippets"
        - prerequisites-task
    - run:
        "!reference":
        - ".snippets"
        - check-new-image
    - run: sed -i'.bu' "s=--VERSION--=$TAG_FULL_NEW, $TAG_MAJOR_MINOR_NEW, $TAG_MAJOR_NEW=g" README.md
    - run: task --taskfile "$DOCKER_TASKFILE_SBOM" get-sbom-subset INPUT=sbom_new.txt OUTPUT=sbom_subset.txt GREP="$DOCKER_SBOM_SUBSET"
    - run: task --taskfile "$DOCKER_TASKFILE_SBOM" set-sbom-in-file SBOM=sbom_subset.txt
    - run: if [ "$PUBLISH" = "1" ]; then skopeo copy --multi-arch all --dest-creds $REGISTRY_USER:$REGISTRY_PASS "docker://$CI_REGISTRY_IMAGE/${{ github.ref }}@$digest_ci" "docker://$REGISTRY_URL:$TAG_FULL_NEW"; fi
    - run: if [ "$PUBLISH" = "1" ]; then cosign sign --tlog-upload=false --key "$COSIGN_PRIVATE_KEY" "$REGISTRY_URL:$TAG_FULL_NEW"; fi
    - run: if [ "$PUBLISH" = "1" ]; then task --taskfile "$DOCKER_TASKFILE_SBOM" attach-sbom-attest I="$REGISTRY_URL:$TAG_FULL_NEW" K="$COSIGN_PRIVATE_KEY"; fi
    - run: if [ "$PUBLISH" = "1" ]; then skopeo copy --multi-arch all --dest-creds $REGISTRY_USER:$REGISTRY_PASS "docker://$CI_REGISTRY_IMAGE/${{ github.ref }}@$digest_ci" "docker://$REGISTRY_URL:$TAG_MAJOR_MINOR_NEW"; fi
    - run: if [ "$PUBLISH" = "1" ]; then skopeo copy --multi-arch all --dest-creds $REGISTRY_USER:$REGISTRY_PASS "docker://$CI_REGISTRY_IMAGE/${{ github.ref }}@$digest_ci" "docker://$REGISTRY_URL:$TAG_MAJOR_NEW"; fi
    - run: if [ "$PUBLISH" = "1" ]; then skopeo copy --multi-arch all --dest-creds $REGISTRY_USER:$REGISTRY_PASS "docker://$CI_REGISTRY_IMAGE/${{ github.ref }}@$digest_ci" "docker://$REGISTRY_URL:latest"; fi
    - run: if [ "$PUBLISH" = "1" ]; then docker pushrm "$REGISTRY_RM_URL"; fi
    - run: docker logout
      if: always()
  publish-quay:
    needs:
    - docker-build
    - trigger-publish
    - publish-dockerhub
    runs-on: ubuntu-latest
    container:
      image: "$DOCKER_IMAGE_FACTORY"
    if: !(${{ github.ref }}) || ${{ github.ref }} == $CI_DEFAULT_BRANCH || $DOCKER_QUAY_IMAGE_REPOSITORY
    timeout-minutes: 60
    services:
      docker:$DOCKER_SERVICE_DOCKER_TAG:
        image: docker:$DOCKER_SERVICE_DOCKER_TAG
    env:
      DOCKER_REGISTRY_IMAGE_TAG: "$CI_REGISTRY_IMAGE/${{ github.ref }}:${{ github.sha }}"
      DOCKER_DOCKERHUB_IMAGE_REPOSITORY: index.docker.io/jfxs/wrangler
      DOCKER_DOCKERHUB_RM_URL: jfxs/wrangler
      DOCKER_QUAY_IMAGE_REPOSITORY: quay.io/ifxs/wrangler
      DOCKER_QUAY_RM_URL: quay.io/ifxs/wrangler
      DOCKER_SBOM_SUBSET: "^ca-certificates |^curl |^git |^github.com/go-task/task/v3 |^node |^npm |^wrangler "
      LINT_DOCKER: 'true'
      LINT_VALE: 'true'
      TASKFILE_VERSION: ".Taskfile-version.yml"
      DOCKER_TEST_VERSION_DIND: 'false'
      REGISTRY_USER: "$QUAY_USER"
      REGISTRY_PASS: "$QUAY_PASSWORD"
      REGISTRY_URL: "$DOCKER_QUAY_IMAGE_REPOSITORY"
      REGISTRY_RM_URL: "$DOCKER_QUAY_IMAGE_REPOSITORY"
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 20
        lfs: true
    - uses: actions/download-artifact@v4.1.0
      with:
        name: docker:build
    - uses: actions/download-artifact@v4.1.0
      with:
        name: trigger:publish
    - run: if [ "$PUBLISH" = "1" ]; then echo -n "$REGISTRY_PASS" | docker login -u "$REGISTRY_USER" --password-stdin quay.io; fi
    - run:
        "!reference":
        - ".snippets"
        - prerequisites-task
    - run:
        "!reference":
        - ".snippets"
        - check-new-image
    - run: sed -i'.bu' "s=--VERSION--=$TAG_FULL_NEW, $TAG_MAJOR_MINOR_NEW, $TAG_MAJOR_NEW=g" README.md
    - run: task --taskfile "$DOCKER_TASKFILE_SBOM" get-sbom-subset INPUT=sbom_new.txt OUTPUT=sbom_subset.txt GREP="$DOCKER_SBOM_SUBSET"
    - run: task --taskfile "$DOCKER_TASKFILE_SBOM" set-sbom-in-file SBOM=sbom_subset.txt
    - run: if [ "$PUBLISH" = "1" ]; then skopeo copy --multi-arch all --dest-creds $REGISTRY_USER:$REGISTRY_PASS "docker://$CI_REGISTRY_IMAGE/${{ github.ref }}@$digest_ci" "docker://$REGISTRY_URL:$TAG_FULL_NEW"; fi
    - run: if [ "$PUBLISH" = "1" ]; then cosign sign --tlog-upload=false --key "$COSIGN_PRIVATE_KEY" "$REGISTRY_URL:$TAG_FULL_NEW"; fi
    - run: if [ "$PUBLISH" = "1" ]; then task --taskfile "$DOCKER_TASKFILE_SBOM" attach-sbom-attest I="$REGISTRY_URL:$TAG_FULL_NEW" K="$COSIGN_PRIVATE_KEY"; fi
    - run: if [ "$PUBLISH" = "1" ]; then skopeo copy --multi-arch all --dest-creds $REGISTRY_USER:$REGISTRY_PASS "docker://$CI_REGISTRY_IMAGE/${{ github.ref }}@$digest_ci" "docker://$REGISTRY_URL:$TAG_MAJOR_MINOR_NEW"; fi
    - run: if [ "$PUBLISH" = "1" ]; then skopeo copy --multi-arch all --dest-creds $REGISTRY_USER:$REGISTRY_PASS "docker://$CI_REGISTRY_IMAGE/${{ github.ref }}@$digest_ci" "docker://$REGISTRY_URL:$TAG_MAJOR_NEW"; fi
    - run: if [ "$PUBLISH" = "1" ]; then skopeo copy --multi-arch all --dest-creds $REGISTRY_USER:$REGISTRY_PASS "docker://$CI_REGISTRY_IMAGE/${{ github.ref }}@$digest_ci" "docker://$REGISTRY_URL:latest"; fi
    - run: if [ "$PUBLISH" = "1" ]; then docker pushrm "$REGISTRY_RM_URL"; fi
    - run: docker logout quay.io
      if: always()
